/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.12.1/samples
 * This project uses @Incubating APIs which are subject to change.
 */
import com.bmuschko.gradle.docker.DockerExtension
import com.bmuschko.gradle.docker.tasks.DockerInfo
import io.spring.gradle.dependencymanagement.dsl.DependencyManagementExtension
import io.spring.gradle.dependencymanagement.dsl.ImportsHandler
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.springframework.boot.gradle.dsl.SpringBootExtension

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    java
    `java-library`
    `maven-publish`
    id("com.bmuschko.docker-spring-boot-application") apply false
    id("org.springframework.boot") apply false
    id("io.spring.dependency-management") apply false
    id("com.bmuschko.docker-remote-api") apply false
    id("org.openapi.generator") apply false
    kotlin("jvm") apply false
    kotlin("plugin.spring") apply false
    kotlin("plugin.jpa") apply false
    kotlin("plugin.allopen") apply false
}

allprojects {
    group = "airlines-backend-microservices"
    version =
        if (project.properties["version"]!! == "unspecified") "local-SNAPSHOT" else project.properties["version"]!!
}

subprojects {
    apply(plugin = "com.bmuschko.docker-remote-api")

    tasks.register<DockerInfo>("dockerInfo")

    tasks.withType<KotlinCompile>().configureEach {
        compilerOptions {
            freeCompilerArgs.addAll("-Xjsr305=strict", "-Xallow-result-return-type")
            jvmTarget.set(org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_21)
        }
    }
}

configure(
    allprojects.filter {
        it.path !in setOf(
            ":airlines-backend-microservices",
        )
    }
) {
    apply {
        plugin("java")
        plugin("io.spring.dependency-management")
        plugin("org.jetbrains.kotlin.jvm")
        plugin("org.jetbrains.kotlin.plugin.spring")
        plugin("org.jetbrains.kotlin.plugin.jpa")
    }
    tasks.withType<Test> {
        useJUnitPlatform()
        systemProperties("spring.profiles.active" to "test")
    }
    repositories {
        mavenCentral()
    }

    configure<DependencyManagementExtension> {
        imports(
            delegateClosureOf<ImportsHandler> {
                mavenBom("org.springframework.boot:spring-boot-dependencies:${property("springBootVersion")}")
                mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
            },
        )
    }

    dependencies {
        implementation("org.apache.commons:commons-lang3:${property("commonsLang3Version")}")
        implementation("org.apache.commons:commons-collections4:${property("commonsCollections4Version")}")
        implementation("com.sun.xml.bind:jaxb-impl:${property("jaxbImplVersion")}")
        implementation("commons-io:commons-io:${property("commonsIoVersion")}")
        implementation("ognl:ognl:${property("ognlVersion")}")
        implementation("com.itextpdf:itextpdf:${property("itextPdfVersion")}")
        implementation("com.itextpdf:html2pdf:${property("html2PdfVersion")}")
        implementation("com.itextpdf:kernel:${property("kernelVersion")}")
        implementation("com.itextpdf.tool:xmlworker:${property("xmlWorkerVersion")}")
        implementation("org.springdoc:springdoc-openapi-starter-webflux-ui:${property("openApiWebfluxVersion")}")
        implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:${property("openApiStarterVersion")}")
        implementation("com.google.guava:guava:${property("guavaVersion")}")
        implementation("org.springframework.boot:spring-boot-starter-amqp:${property("amqpVersion")}")
        testImplementation("org.springframework.amqp:spring-rabbit-test:${property("rabbitTestVersion")}")
        testImplementation("org.springframework.boot:spring-boot-starter-test:${property("springBootStarterTest")}")

        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    }

    configure<JavaPluginExtension> {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }


    tasks.register<Delete>("deleteGenSrc") {
        delete(fileTree("gen-src"))
        isFollowSymlinks = true
    }

    tasks.named("clean").get().dependsOn("deleteGenSrc")
}

val bootableModules: Set<String> = setOf(
    ":tourist",
    ":ticket",
    ":flight",
    ":mail-sender",
    ":ticket-pdf-generator"
)


// Register the standalone task from buildSrc
tasks.register<DockerPushAllTask>("dockerPushAll") {
    val listOfBootableModules = bootableModules.toList()
    modules.set(listOfBootableModules)
}


configure(
    allprojects.filter { it.path in bootableModules }
) {

    apply {
        plugin("org.springframework.boot")
        plugin("io.spring.dependency-management")
        plugin("maven-publish")
        plugin("org.openapi.generator")
        plugin("com.bmuschko.docker-spring-boot-application")
    }

    configure<SpringBootExtension> {
        buildInfo()
    }

    configure<DockerExtension> {
        registryCredentials {
            url.set("default-route-openshift-image-registry.apps-crc.testing")
            username.set("developer")
            password.set(System.getenv("OPENSHIFT_TOKEN") ?: "sha256~nUr8IsuOv9hEzUruoFSA3oLWFjsSLsGtjVv0KV5VIIY")
        }
    }


    publishing {
        publications {
            create<MavenPublication>("mavenJava") {
                artifact(tasks.getByName("bootJar"))
            }
        }
    }
}
