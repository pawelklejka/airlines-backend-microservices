/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    `java-library`
    `maven-publish`
    kotlin("jvm")
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.cloud:spring-cloud-starter-config")
    implementation("org.springframework.boot:spring-boot-starter-mail")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-amqp")
    implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.amqp:spring-rabbit-test")
}

tasks.bootJar {
    launchScript()
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc> {
    options.encoding = "UTF-8"
}

docker {
    val registryUrl = "default-route-openshift-image-registry.apps-crc.testing"
    val registryProject = "airlines-backend-microservices"
    val moduleName = project.name

    springBootApplication {
        baseImage.set("amazoncorretto:21")
        var images = setOf(
            "${registryUrl}/$registryProject/airlines-$moduleName:${version}",
        )
        if (version == "develop-SNAPSHOT") {
            images = images.plus("${registryUrl}/$registryProject/airlines-$moduleName:latest")
        }
        this.images.set(
            images,
        )
    }
}